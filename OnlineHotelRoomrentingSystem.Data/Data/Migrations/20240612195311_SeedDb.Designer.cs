// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineHotelRoomrentingSystem.Data;

#nullable disable

namespace HotelRoomRentingSystem.Data.Migrations
{
    [DbContext(typeof(HotelRoomBookingDb))]
    [Migration("20240612195311_SeedDb")]
    partial class SeedDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db714e87-03f8-4e68-82f7-37fd725762cf",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user@gmail.com",
                            NormalizedUserName = "user@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECD7nsrhs6Wy4+JKW0AhA2a5yMuvFizge7sN/QLpBQ+eh/fGhgBaqrGlS9byRl/4vA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b270d2a9-d71e-482f-9299-02ce1cba1fe2",
                            TwoFactorEnabled = false,
                            UserName = "user@gmail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02736384-59df-4370-bdc4-b6326958e6f4",
                            Email = "secondUser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "secondUser@gmail.com",
                            NormalizedUserName = "secondUser@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEHghMLJawpRsooq2/pXW1z2qqJP2Znpf38ekEaZA94Ya4SrejqXrbO2T+fRwWqmb6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af6cbaf0-c650-4ccb-9d9d-d73ad13fe5af",
                            TwoFactorEnabled = false,
                            UserName = "secondUser@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Agents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c0e049e-325d-4246-b0e8-444c45905fe5"),
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EGN = "8505151234",
                            FirstName = "Ivan",
                            LastName = "Petrov",
                            MiddleName = "Stoqnov",
                            PhoneNumber = "+359888888888",
                            UserId = new Guid("259d7876-ce5c-4956-9bf6-d70b7ef0b1e3")
                        },
                        new
                        {
                            Id = new Guid("9639e0fa-a591-480c-ae67-1333545ee981"),
                            DateOfBirth = new DateTime(1995, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EGN = "95031756984",
                            FirstName = "Agent",
                            LastName = "Agentov",
                            MiddleName = "AgentJoe",
                            PhoneNumber = "08459632555",
                            UserId = new Guid("a24d63e6-1db1-4720-8e30-79541f66b243")
                        });
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Budget"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Family"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hostel"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Motel"
                        });
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HotelManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("HotelManagerId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c8e143f-5847-4c00-b136-43742d07131b"),
                            Address = "123 Main Street",
                            CategoryId = 1,
                            City = "Metropolis",
                            Country = "United States",
                            Description = "Luxury Palace Hotel offers the epitome of comfort and elegance with its lavish accommodations and world-class amenities.",
                            Email = "info@luxurypalace.com",
                            HotelManagerId = new Guid("2c6786c4-263b-4cb9-92c2-e977a31dafb3"),
                            Image = "/images/HotelOne.jpg",
                            MaximumCapacity = 500,
                            Name = "Luxury Palace Hotel",
                            NumberOfRooms = 200,
                            PhoneNumber = "+35965896547"
                        },
                        new
                        {
                            Id = new Guid("d9de3174-3180-4f48-80c1-38c607b1ff5f"),
                            Address = "456 Ocean Avenue",
                            CategoryId = 2,
                            City = "Beachtown",
                            Country = "United States",
                            Description = "Seaside Resort is a tranquil retreat nestled along the picturesque coastline, offering stunning ocean views and impeccable service.",
                            Email = "info@seasideresort.com",
                            HotelManagerId = new Guid("2c6786c4-263b-4cb9-92c2-e977a31dafb3"),
                            Image = "/images/HotelOne.jpg",
                            MaximumCapacity = 400,
                            Name = "Seaside Resort",
                            NumberOfRooms = 150,
                            PhoneNumber = "+3598756236514"
                        },
                        new
                        {
                            Id = new Guid("d4ffc402-d1f5-4c05-831e-e5d9b7cf2fe1"),
                            Address = "789 Forest Road",
                            CategoryId = 1,
                            City = "Mountainsville",
                            Country = "United States",
                            Description = "Mountain Lodge Retreat offers a peaceful escape surrounded by breathtaking natural beauty, perfect for outdoor enthusiasts and relaxation seekers.",
                            Email = "info@mountainlodge.com",
                            HotelManagerId = new Guid("e2703489-f2a9-47ea-ac75-f9f06a1f31fc"),
                            Image = "/images/OceansViews.jpg",
                            MaximumCapacity = 300,
                            Name = "Mountain Lodge Retreat",
                            NumberOfRooms = 100,
                            PhoneNumber = "+3591914999"
                        });
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("HotelId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RoomId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Amazing experience, highly recommend!",
                            HotelId = new Guid("f2c8cf39-d79d-4b2f-a59f-0a1d1e2f5042"),
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 6, 12, 22, 53, 9, 746, DateTimeKind.Local).AddTicks(8862),
                            RoomId = new Guid("1b926edf-0eb1-4db8-8022-220a10c928e6"),
                            UserId = new Guid("92c401e0-a7a9-41fe-ad2d-60d518b6a5a9")
                        },
                        new
                        {
                            Id = 2,
                            Content = "Decent place, but could be better.",
                            HotelId = new Guid("43470819-a400-4765-8570-415ebb3f1eeb"),
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 12, 22, 53, 9, 746, DateTimeKind.Local).AddTicks(9115),
                            RoomId = new Guid("38f0ad0a-53db-4666-8a98-cae9e967720e"),
                            UserId = new Guid("b1830f82-ec1f-48e2-a576-015cdeffea7b")
                        });
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvaible")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RenterId");

                    b.HasIndex("RoomId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16fd314d-0728-465a-9375-3a654d6995cf"),
                            AgentId = new Guid("0d5996fc-08e5-4657-aa4a-72649ca8b9d9"),
                            Description = "",
                            HotelId = new Guid("fd7b7cd1-4755-4bbc-bf0f-22468de0fa84"),
                            Image = "/rooms/room1.jpg",
                            IsAvaible = true,
                            PricePerNight = 150.00m,
                            RoomId = 1,
                            RoomNumber = 0
                        },
                        new
                        {
                            Id = new Guid("ca0fdbdf-f691-4f05-ac66-c7b31c0fbd6f"),
                            AgentId = new Guid("84935f65-3ea2-4e74-bf93-aea16288a8c3"),
                            Description = "",
                            HotelId = new Guid("6553e847-25ed-4dfd-ac86-b3abf8462be4"),
                            Image = "/rooms/room2.jpg",
                            IsAvaible = true,
                            PricePerNight = 75.00m,
                            RoomId = 2,
                            RoomNumber = 0
                        });
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RoomType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Single"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Double"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("OnlineHotelRoomrentingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("OnlineHotelRoomrentingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineHotelRoomrentingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("OnlineHotelRoomrentingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Agent", b =>
                {
                    b.HasOne("OnlineHotelRoomrentingSystem.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Hotel", b =>
                {
                    b.HasOne("OnlineHotelRoomrentingSystem.Models.Category", "Category")
                        .WithMany("Hotels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineHotelRoomrentingSystem.Models.Agent", "HotelManager")
                        .WithMany("OwnedHotels")
                        .HasForeignKey("HotelManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("HotelManager");
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Review", b =>
                {
                    b.HasOne("OnlineHotelRoomrentingSystem.Models.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineHotelRoomrentingSystem.Models.Room", "Room")
                        .WithMany("Reviews")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineHotelRoomrentingSystem.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Hotel");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Room", b =>
                {
                    b.HasOne("OnlineHotelRoomrentingSystem.Models.Agent", "Agent")
                        .WithMany("OwnedRooms")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineHotelRoomrentingSystem.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineHotelRoomrentingSystem.Models.ApplicationUser", "Renter")
                        .WithMany("RentedRooms")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineHotelRoomrentingSystem.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Hotel");

                    b.Navigation("Renter");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Agent", b =>
                {
                    b.Navigation("OwnedHotels");

                    b.Navigation("OwnedRooms");
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("RentedRooms");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Category", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Hotel", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.Room", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("OnlineHotelRoomrentingSystem.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
